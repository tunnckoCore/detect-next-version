{"next version is minor":{"skip":false,"todo":false,"run":false,"isPending":false,"isRejected":false,"isFulfilled":true,"id":1,"str":"async (t) => {\n  const result = await detectNextVersion('@tunnckocore/package-json', [\n    'fix: some foo bar',\n    'feat(fake): ok dude',\n    'chore(ci): tweaks',\n  ]);\n\n  const { increment, pkg, lastVersion, nextVersion } = result;\n\n  t.strictEqual(increment, 'minor');\n  t.strictEqual(pkg.version, lastVersion);\n  t.strictEqual(nextVersion, semverIncrement(lastVersion, increment));\n}","title":"next version is minor"},"throw if no package name is given or not string":{"skip":false,"todo":false,"run":false,"isPending":false,"isRejected":false,"isFulfilled":true,"id":2,"str":"async (t) => {\n  try {\n    await detectNextVersion();\n  } catch (err) {\n    t.ok(err);\n    t.strictEqual(err.message, 'expect `name` to be string');\n  }\n}","title":"throw if no package name is given or not string"},"throw if no commit messages are given":{"skip":false,"todo":false,"run":false,"isPending":false,"isRejected":false,"isFulfilled":true,"id":3,"str":"async (t) => {\n  try {\n    await detectNextVersion('@tunnckocore/qq5');\n  } catch (err) {\n    t.ok(err);\n    t.ok(err.message.includes('expect `commitMessages` to be string or array'));\n  }\n}","title":"throw if no commit messages are given"},"dont give `result.nextVersion` when only \"chore\" commits":{"skip":false,"todo":false,"run":false,"isPending":false,"isRejected":false,"isFulfilled":true,"id":4,"str":"async (t) => {\n  const result = await detectNextVersion('@tunnckocore/qq5', [\n    'chore: foo bar baz',\n    'chore(ci): some build fix',\n  ]);\n\n  t.strictEqual(result.increment, false);\n  t.strictEqual(result.lastVersion, '0.0.0');\n\n  const hasOwn = (key) => Object.prototype.hasOwnProperty.call(result, key);\n  t.strictEqual(hasOwn(result, 'nextVersion'), false);\n  t.strictEqual(result.nextVersion, undefined);\n}","title":"dont give `result.nextVersion` when only \"chore\" commits"}}